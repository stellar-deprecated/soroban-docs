{
  "openrpc": "1.2.4",
  "info": {
    "title": "Soroban RPC",
    "description": "Soroban-RPC allows you to communicate directly with Soroban via a JSON RPC interface.",
    "termsOfService": "https://stellar.org/terms-of-service",
    "contact": {
      "name": "Stellar Development Foundation",
      "url": "https://stellar.org/connect",
      "email": "hello@stellar.org"
    },
    "license": {
      "name": "Apache 2.0",
      "url": "https://www.apache.org/licenses/LICENSE-2.0.html"
    },
    "version": "v20.0.0-rc4"
  },
  "servers": [
    {
      "name": "Testnet",
      "url": "https://soroban-testnet.stellar.org:443",
      "summary": "Publicly available RPC server maintained by SDF, operating on the Testnet test network.",
      "description": "Testnet is meant to be a stable network that runs a production (or near-production) version of the Stellar network."
    },
    {
      "name": "Futurenet",
      "url": "https://rpc-futurenet.stellar.org:443",
      "summary": "Publicly available RPC server maintained by SDF, operating on the Futurenet test network.",
      "description": "Futurenet is meant to be a bleeding-edge, experimental network that runs an early, test version of the Stellar network."
    }
  ],
  "methods": [
    {
      "name": "getEvents",
      "summary": "returns contract events",
      "description": "Clients can request a filtered list of events emitted by a given ledger range.\n\nSoroban-RPC will support querying within a maximum 24 hours of recent ledgers.\n\nNote, this could be used by the client to only prompt a refresh when there is a new ledger with relevant events. It should also be used by backend Dapp components to \"ingest\" events into their own database for querying and serving.\n\nIf making multiple requests, clients should deduplicate any events received, based on the event's unique id field. This prevents double-processing in the case of duplicate events being received.\n\nBy default soroban-rpc retains the most recent 24 hours of events.",
      "paramStructure": "by-name",
      "params": [
        {
          "$ref": "#/components/contentDescriptors/StartLedger"
        },
        {
          "$ref": "#/components/contentDescriptors/EventFilters"
        },
        {
          "$ref": "#/components/contentDescriptors/Pagination"
        }
      ],
      "result": {
        "name": "getEventsResult",
        "schema": {
          "type": "object",
          "properties": {
            "latestLedger": {
              "$ref": "#/components/schemas/LatestLedger"
            },
            "events": {
              "type": "array",
              "items": {
                "$ref": "#/components/schemas/Event"
              }
            }
          }
        }
      }
    },
    {
      "name": "getHealth",
      "summary": "returns node health",
      "description": "General node health check.",
      "paramStructure": "by-name",
      "params": [],
      "result": {
        "name": "getHealthResult",
        "schema": {
          "type": "object",
          "properties": {
            "status": {
              "type": "string",
              "description": "\"healthy\""
            }
          }
        }
      }
    },
    {
      "name": "getLatestLedger",
      "summary": "returns latest known ledger",
      "description": "For finding out the current latest known ledger of this node. This is a subset of the ledger info from Horizon.",
      "paramStructure": "by-name",
      "params": [],
      "result": {
        "name": "getLatestLedgerResult",
        "schema": {
          "type": "object",
          "properties": {
            "id": {
              "description": "Hash of the latest ledger as a hex-encoded string",
              "$ref": "#/components/schemas/Hash"
            },
            "protocolVersion": {
              "$ref": "#/components/schemas/ProtocolVersion"
            },
            "sequence": {
              "type": "number",
              "description": "Sequence number of the latest ledger"
            }
          }
        }
      }
    },
    {
      "name": "getLedgerEntries",
      "summary": "returns ledger entries",
      "description": "For reading the current value of ledger entries directly.\n\nAllows you to directly inspect the current state of a contract, a contract's code, or any other ledger entry. This is a backup way to access your contract data which may not be available via events or `simulateTransaction`.\n\nTo fetch contract wasm byte-code, use the ContractCode ledger entry key.",
      "paramStructure": "by-name",
      "params": [
        {
          "$ref": "#/components/contentDescriptors/LedgerKeys"
        }
      ],
      "result": {
        "name": "getLedgerEntriesResult",
        "schema": {
          "type": "object",
          "properties": {
            "latestLedger": {
              "$ref": "#/components/schemas/LatestLedger"
            },
            "entries": {
              "type": "array",
              "description": "Array of objects containing all found ledger entries",
              "items": {
                "$ref": "#/components/schemas/LedgerEntry"
              }
            }
          },
          "required": [ "latestLedger" ]
        }
      }
    },
    {
      "name": "getNetwork",
      "summary": "returns network config",
      "description": "General information about the currently configured network. This response will contain all the information needed to successfully submit transactions to the network this node serves.",
      "paramStructure": "by-name",
      "params": [],
      "result": {
        "name": "getNetworkResult",
        "schema": {
          "type": "object",
          "properties": {
            "passphrase": {
              "type": "string",
              "description": "Network passphrase configured for this Soroban RPC node."
            },
            "protocolVersion": {
              "$ref": "#/components/schemas/ProtocolVersion"
            },
            "friendbotUrl": {
              "type": "string",
              "description": "(optional) The URL of this network's \"friendbot\" faucet"
            }
          },
          "required": [ "passphrase", "protocolVersion" ]
        }
      }
    },
    {
      "name": "getTransaction",
      "summary": "returns transaction details",
      "description": "The getTransaction method provides details about the specified transaction. Clients are expected to periodically query this method to ascertain when a transaction has been successfully recorded on the blockchain. The soroban-rpc system maintains a restricted history of recently processed transactions, with the default retention window set at 1440 ledgers, approximately equivalent to a 2-hour timeframe. For private soroban-rpc instances, it is possible to modify the retention window value by adjusting the transaction-retention-window configuration setting. For comprehensive debugging needs that extend beyond the 2-hour timeframe, it is advisable to retrieve transaction information from Horizon, as it provides a lasting and persistent record.",
      "paramStructure": "by-name",
      "params": [
        {
          "$ref": "#/components/contentDescriptors/TransactionHash"
        }
      ],
      "result": {
        "name": "getTransactionResult",
        "schema": {
          "type": "object",
          "properties": {
            "status": {
              "type": "string",
              "description": "The current status of the transaction by hash",
              "enum": [
                "SUCCESS",
                "NOT_FOUND",
                "FAILED"
              ]
            },
            "latestLedger": {
              "$ref": "#/components/schemas/LatestLedger"
            },
            "latestLedgerCloseTime": {
              "$ref": "#/components/schemas/LatestLedgerCloseTime"
            },
            "oldestLedger": {
              "$ref": "#/components/schemas/OldestLedger"
            },
            "oldestLedgerCloseTime": {
              "$ref": "#/components/schemas/OldestLedgerCloseTime"
            },
            "ledger": {
              "title": "ledger",
              "description": "(optional) The sequence of the ledger which included the transaction. This field is only present if `status` is `SUCCESS` or `FAILED`.",
              "$ref": "#/components/schemas/LedgerNumber"
            },
            "createdAt": {
              "title": "createdAt",
              "description": "(optional) The unix timestamp of when the transaction was included in the ledger. This field is only present if `status` is `SUCCESS` or `FAILED`.",
              "$ref": "#/components/schemas/LedgerCloseTime"
            },
            "applicationOrder": {
              "type": "number",
              "description": "(optional) The index of the transaction among all transactions included in the ledger. This field is only present if `status` is `SUCCESS` or `FAILED`."
            },
            "feeBump": {
              "type": "boolean",
              "description": "(optional) Indicates whether the transaction was fee bumped. This field is only present if `status` is `SUCCESS` or `FAILED`."
            },
            "envelopeXdr": {
              "type": "string",
              "description": "(optional) A base64 encoded string of the raw TransactionEnvelope XDR struct for this transaction."
            },
            "resultXdr": {
              "type": "string",
              "description": "(optional) A base64 encoded string of the raw TransactionResult XDR struct for this transaction. This field is only present if `status` is `SUCCESS` or `FAILED`."
            },
            "resultMetaXdr": {
              "type": "string",
              "description": "(optional) A base64 encoded string of the raw TransactionResultMeta XDR struct for this transaction."
            }
          },
          "required": [ "status", "latestLedger", "latestLedgerCloseTime", "oldestLedger", "oldestLedgerCloseTime" ]
        }
      }
    },
    {
      "name": "sendTransaction",
      "summary": "submits a transaction",
      "description": "Submit a real transaction to the Stellar network. This is the only way to make changes on-chain.\n\n Unlike Horizon, this does not wait for transaction completion. It simply validates and enqueues the transaction. Clients should call `getTransaction` to learn about transaction success/failure.\n\nThis supports all transactions, not only smart contract-related transactions.",
      "paramStructure": "by-name",
      "params": [
        {
          "name": "transaction",
          "description": "The signed transaction (serialized in base64) to broadcast for inclusion in a ledger.",
          "required": true,
          "schema": {
            "type": "string"
          }
        }
      ],
      "result": {
        "name": "sendTransactionResult",
        "summary": "Transaction status and network state.",
        "description": "Transaction status and network state. The result will include if the transaction was successfully enqueued, and information about the current ledger.",
        "schema": {
          "type": "object",
          "properties": {
            "hash": {
              "$ref": "#/components/schemas/TransactionHash"
            },
            "status": {
              "type": "string",
              "description": "The current status of the transaction by hash.",
              "enum": [
                "PENDING",
                "DUPLICATE",
                "TRY_AGAIN_LATER",
                "ERROR"
              ]
            },
            "latestLedger": {
              "$ref": "#/components/schemas/LatestLedger"
            },
            "latestLedgerCloseTime": {
              "$ref": "#/components/schemas/LatestLedgerCloseTime"
            },
            "errorResultXdr": {
              "type": "string",
              "description": "(optional) If the transaction status is `ERROR`, this will be a base64 encoded string of the raw TransactionResult XDR struct containing details on why stellar-core rejected the transaction.",
              "contentEncoding": "base64"
            }
          },
          "required": [ "hash", "status", "latestLedger", "latestLedgerCloseTime" ]
        }
      }
    },
    {
      "name": "simulateTransaction",
      "summary": "submits a trial contract invocation transaction",
      "description": "Submit a trial contract invocation to simulate how it would be executed by the network. This endpoint calculates the effective transaction data, required authorizations, and minimal resource fee. It provides a way to test and analyze the potential outcomes of a transaction without actually submitting it to the network.",
      "paramStructure": "by-name",
      "params": [
        {
          "name": "transaction",
          "summary": "The transaction to be simulated (serialized in base64)",
          "description": "In order for the RPC server to successfully simulate a Stellar transaction, the provided transaction must contain only a single operation of the type `invokeHostFunction`.",
          "required": true,
          "schema": {
            "type": "string"
          }
        }
      ],
      "result": {
        "name": "simulateTransactionResult",
        "summary": "Anticipated affects the given transaction will have on the network.",
        "description": "The response will include the anticipated affects the given transaction will have on the network. Additionally, information needed to build, sign, and actually submit the transaction will be provided.",
        "schema": {
          "type": "object",
          "properties": {
            "latestLedger": {
              "$ref": "#/components/schemas/LatestLedger"
            },
            "minResourceFee": {
              "type": "string",
              "description": "(optional) Stringified number - Recommended minimum resource fee to add when submitting the transaction. This fee is to be added on top of the [Stellar network fee](https://developers.stellar.org/docs/encyclopedia/fees-surge-pricing-fee-strategies#network-fees-on-stellar). Not present in case of error."
            },
            "cost": {
              "type": "object",
              "description": "(optional) - Information about instructions used, etc. Not present in case of error.",
              "properties": {
                "cpuInsns": {
                  "type": "string",
                  "description": "Stringified number - Total cpu instructions consumed by this transaction"
                },
                "memBytes": {
                  "type": "string",
                  "description": "Stringified number - Total memory bytes allocated by this transaction"
                }
              },
              "required": [ "cpuInsns", "memBytes" ]
            },
            "results": {
              "type": "array",
              "description": "(optional) - This array will only have one element: the result for the Host Function invocation. Only present on successful simulation (i.e. no error) of `InvokeHostFunction` operations.",
              "items": {
                "type": "object",
                "properties": {
                  "xdr": {
                    "type": "string",
                    "description": "Serialized base64 string - return value of the Host Function call."
                  },
                  "auth": {
                    "type": "array",
                    "description": "Array of serialized base64 strings - Per-address authorizations recorded when simulating this Host Function call.",
                    "items": {
                      "type": "string"
                    }
                  }
                },
                "required": [ "xdr", "auth" ]
              }
            },
            "transactionData": {
              "type": "string",
              "description": "(optional) Serialized base64 string - The recommended Soroban Transaction Data to use when submitting the simulated transaction. This data contains the refundable fee and resource usage information such as the ledger footprint and IO access data (serialized in a base64 string). Not present in case of error."
            },
            "events": {
              "type": "array",
              "description": "(optional) Array of serialized base64 strings - Array of the events emitted during the contract invocation. The events are ordered by their emission time. (an array of serialized base64 strings). Only present when simulating of `InvokeHostFunction` operations, note that it can be present on error, providing extra context about what failed.",
              "items": {
                "type": "string"
              }
            },
            "restorePreamble": {
              "type": "object",
              "description": "(optional) - It can only be present on successful simulation (i.e. no error) of `InvokeHostFunction` operations. If present, it indicates that the simulation detected expired ledger entries which need to be restored before the submission of the `InvokeHostFunction` operation. The `minResourceFee` and `transactionData` fields should be used to submit a transaction containing a `RestoreFootprint` operation.",
              "properties": {
                "minResourceFee": {
                  "type": "string",
                  "description": "Stringified number - Recommended minimum resource fee to add when submitting the `RestoreFootprint` operation. This fee is to be added on top of the [Stellar network fee](https://developers.stellar.org/docs/encyclopedia/fees-surge-pricing-fee-strategies#network-fees-on-stellar)."
                },
                "transactionData": {
                  "type": "string",
                  "description": "Serialized base64 string - The recommended Soroban Transaction Data to use when submitting the `RestoreFootprint` operation."
                }
              },
              "required": [ "minResourceFee", "transactionData" ]
            },
            "error": {
              "type": "string",
              "description": "(optional) - This field will include details about why the invoke host function call failed. Only present if the transaction simulation failed."
            }
          },
          "required": [ "latestLedger" ]
        }
      }
    }
  ],
  "components": {
    "contentDescriptors": {
      "Pagination": {
        "name": "pagination",
        "required": false,
        "description": "Pagination in soroban-rpc is similar to pagination in Horizon.",
        "schema": {
          "$ref": "#/components/schemas/PaginationOptions"
        }
      },
      "StartLedger": {
        "name": "startLedger",
        "required": true,
        "description": "Stringified ledger sequence number to fetch events after (inclusive). This method will return an error if `startLedger` is less than the oldest ledger stored in this node, or greater than the latest ledger seen by this node. If a cursor is included in the request, `startLedger` must be omitted.",
        "schema": {
          "$ref": "#/components/schemas/LedgerNumber"
        }
      },
      "EventFilters": {
        "name": "filters",
        "description": "List of filters for the returned events. Events matching any of the filters are included. To match a filter, an event must match both a contractId and a topic. Maximum 5 filters are allowed per request.",
        "schema": {
          "$ref": "#/components/schemas/EventFilters"
        }
      },
      "TransactionHash": {
        "name": "hash",
        "required": true,
        "schema": {
          "$ref": "#/components/schemas/TransactionHash"
        }
      },
      "LedgerKeys": {
        "name": "keys",
        "required": true,
        "schema": {
          "$ref": "#/components/schemas/LedgerKeys"
        }
      }
    },
    "schemas": {
      "Boolean": {
        "type": "boolean"
      },
      "PaginationOptions": {
        "type": "object",
        "properties": {
          "cursor": {
            "type": "string",
            "description": "A string ID that points to a specific location in a collection of responses and is pulled from the `paging_token` value of a record. When a cursor is provided Soroban-RPC will _not_ include the element whose id matches the cursor in the response. Only elements which appear _after_ the cursor are included."
          },
          "limit": {
            "type": "number",
            "description": "The maximum number of records returned. The limit for [getEvents](https://soroban.stellar.org/api/getEvents) can range from 1 to 10000 - an upper limit that is hardcoded in Soroban-RPC for performance reasons. If this argument isn't designated, it defaults to 100."
          }
        },
        "required": []
      },
      "EventFilters": {
        "type": "array",
        "maxItems": 5,
        "items": {
          "$ref": "#/components/schemas/EventFilter"
        }
      },
      "EventFilter": {
        "type": "object",
        "properties": {
          "type": {
            "$ref": "#/components/schemas/EventFilterType"
          },
          "contractIds": {
            "$ref": "#/components/schemas/ContractIds"
          },
          "topics": {
            "$ref": "#/components/schemas/TopicFilters"
          }
        },
        "required": []
      },
      "EventFilterType": {
        "title": "type",
        "type": "string",
        "description": "A comma separated list of event types (system, contract, or diagnostic) used to filter events. If omitted, all event types are included."
      },
      "Event": {
        "type": "object",
        "properties": {
          "type": {
            "$ref": "#/components/schemas/EventType"
          },
          "ledger": {
            "description": "Stringified sequence number of the ledger in which this event was emitted.",
            "$ref": "#/components/schemas/LedgerNumber"
          },
          "ledgerClosedAt": {
            "type": "string",
            "description": "[ISO-8601](https://www.iso.org/iso-8601-date-and-time-format.html) timestamp of the ledger closing time"
          },
          "contractId": {
            "description": "StrKey representation of the contract address that emitted this event.",
            "$ref": "#/components/schemas/ContractId"
          },
          "id": {
            "$ref": "#/components/schemas/EventId"
          },
          "pagingToken": {
            "description": "Duplicate of `id` field, but in the standard place for pagination tokens.",
            "$ref": "#/components/schemas/EventId"
          },
          "inSuccessfulContractCall": {
            "description": "If true the event was emitted during a successful contract call.",
            "$ref": "#/components/schemas/Boolean"
          },
          "topic": {
            "type": "array",
            "description": "List containing the topic this event was emitted with.",
            "$ref": "#/components/schemas/TopicFilter"
          },
          "value": {
            "$ref": "#/components/schemas/EventValue"
          }
        }
      },
      "EventType": {
        "title": "type",
        "description": "The type of event emission.",
        "type": "string",
        "enum": [ "contract", "diagnostic", "system" ]
      },
      "EventId": {
        "description": "Unique identifier for this event.\n\n- The event's unique id field is based on a [`toid` from Horizon](https://github.com/stellar/go/blob/master/toid/main.go) as used in Horizon's /effects endpoint.\n\n- https://github.com/stellar/go/blob/master/services/horizon/internal/db2/history/effect.go#L58\n\n- Specifically, it is a string containing:\n\n- bigint(32 bit ledger sequence + 20 bit txn number + 12 bit operation) + `<hyphen>` + number for the event within the operation.\n\n- For example: `1234-1`",
        "type": "string"
      },
      "EventXdr": {
        "description": "The emitted body value of the event (serialized in a base64 string).",
        "type": "string"
      },
      "EventValue": {
        "description": "The data the event was broadcasting in the emitted event.",
        "type": "object",
        "properties": {
          "xdr": {
            "$ref": "#/components/schemas/EventXdr"
          }
        }
      },
      "ContractId": {
        "title": "contractId",
        "description": "A StrKey representation of a contract address (`C...`). ([SEP-23](https://github.com/stellar/stellar-protocol/blob/master/ecosystem/sep-0023.md#specification)).",
        "type": "string"
      },
      "ContractIds": {
        "title": "contractIds",
        "type": "array",
        "description": "(optional) List of contract IDs to query for events. If omitted, return events for all contracts. Maximum 5 contract IDs are allowed per request.",
        "maxItems": 5,
        "items": {
          "$ref": "#/components/schemas/ContractId"
        }
      },
      "TopicFilters": {
        "title": "topics",
        "type": "array",
        "description": "List of topic filters. If omitted, query for all events. If multiple filters are specified, events will be included if they match any of the filters. Maximum 5 filters are allowed per request.",
        "maxItems": 5,
        "items": {
          "$ref": "#/components/schemas/TopicFilter"
        }
      },
      "SegmentMatcher": {
        "title": "SegmentMatcher",
        "type": "string",
        "description": "A `SegmentMatcher` is one of the following:\n\n- For an exact segment match, a string containing a base64-encoded ScVal\n\n- For a wildcard single-segment match, the string \"*\", matches exactly one segment."
      },
      "TopicFilter": {
        "type": "array",
        "description": "A `TopicFilter` is `SegmentMatcher[]`\n\n- The list can be 1-4 `SegmentMatchers` long.",
        "minItems": 1,
        "maxItems": 4,
        "items": {
          "$ref": "#/components/schemas/SegmentMatcher"
        }
      },
      "TransactionHash": {
        "title": "hash",
        "description": "Transaction hash, as a hex-encoded string",
        "$ref": "#/components/schemas/Hash"
      },
      "Hash": {
        "title": "hash",
        "type": "string",
        "pattern": "^[a-f\\d]{64}$"
      },
      "LatestLedger": {
        "title": "latestLedger",
        "description": "The latest ledger known to Soroban RPC at the time it handled the request.",
        "$ref": "#/components/schemas/LedgerNumber"
      },
      "LatestLedgerCloseTime": {
        "title": "latestLedgerCloseTime",
        "description": "The unix timestamp of the close time of the latest ledger known to Soroban RPC at the time it handled the request.",
        "$ref": "#/components/schemas/LedgerCloseTime"
      },
      "OldestLedger": {
        "title": "oldestLedger",
        "description": "The oldest ledger ingested by Soroban RPC at the time it handled the request.",
        "$ref": "#/components/schemas/LedgerNumber"
      },
      "OldestLedgerCloseTime": {
        "title": "oldestLedgerCloseTime",
        "description": "The unix timestamp of the close time of the oldest ledger ingested by Soroban RPC at the time it handled the request.",
        "$ref": "#/components/schemas/LedgerCloseTime"
      },
      "LedgerNumber": {
        "title": "ledgerNumber",
        "description": "Stringified sequence number of the ledger.",
        "type": "string"
      },
      "LedgerCloseTime": {
        "title": "ledgerCloseTime",
        "description": "The unix timestamp of the close time of the ledger.",
        "type": "string"
      },
      "LedgerEntry": {
        "type": "object",
        "description": "Object containing information about an existing ledger entry.",
        "properties": {
          "key": {
            "type": "string",
            "description": "The key of the ledger entry (serialized in a base64 string)."
          },
          "xdr": {
            "type": "string",
            "description": "The current value of the given ledger entry (serialized in a base64 string)."
          },
          "lastModifiedLedgerSeq": {
            "description": "The ledger sequence number of the last time this entry was updated.",
            "$ref": "#/components/schemas/LedgerNumber"
          },
          "liveUntilLedgerSeq": {
            "type": "string",
            "$ref": "#/components/schemas/LedgerNumber"
          }
        }
      },
      "ProtocolVersion": {
        "title": "protocolVersion",
        "description": "Stellar Core protocol version associated with the latest ledger.",
        "type": "string"
      },
      "LedgerKeys": {
        "description": "Array containing ledger keys.",
        "type": "array",
        "items": {
          "$ref": "#/components/schemas/LedgerKey"
        }
      },
      "LedgerKey": {
        "type": "string",
        "description": "Ledger key, serialized as a base64 string, corresponding to an existing ledger entry you wish to retrieve."
      }
    }
  }
}
