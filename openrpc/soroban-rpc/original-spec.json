{
    "openrpc": "1.2.4",
    "info": {
        "version": "0.9.4",
        "title": "Soroban RPC",
        "description": "A public discussion about the design of soroban-rpc."
    },
    "servers": [
        {
            "url": "https://rpc-futurenet.stellar.org:443",
            "description": "Publicly available RPC server maintained by SDF, operating on the futurenet test network."
        }
    ],
    "methods": [
        {
            "name": "getEvents",
            "summary": "Clients can request a filtered list of events emitted by a given ledger range.",
            "description": "Clients can request a filtered list of events emitted by a given ledger range.\n\nSoroban-RPC will support querying within a maximum 24 hours of recent ledgers.\n\nNote, this could be used by the client to only prompt a refresh when there is a new ledger with relevant events. It should also be used by backend Dapp components to \"ingest\" events into their own database for querying and serving.\n\nIf making multiple requests, clients should deduplicate any events received, based on the event's unique id field. This prevents double-processing in the case of duplicate events being received.\n\nBy default soroban-rpc retains the most recent 24 hours of events.",
            "paramStructure": "by-name",
            "params": [
                {
                    "name": "startLedger",
                    "summary": "Stringified ledger sequence number to fetch events after (inclusive).",
                    "description": "Stringified ledger sequence number to fetch events after (inclusive). This method will return an error if startLedger is less than the oldest ledger stored in this node, or greater than the latest ledger seen by this node. If a cursor is included in the request, startLedger must be omitted.",
                    "required": true,
                    "schema": {
                        "type": "string"
                    }
                },
                {
                    "name": "filters",
                    "summary": "List of filters for the returned events.",
                    "description": "List of filters for the returned events. Events matching any of the filters are included. To match a filter, an event must match both a contractId and a topic. Maximum 5 filters are allowed per request.",
                    "required": true,
                    "schema": {
                        "type": "array",
                        "maxItems": 5,
                        "items": {
                            "$ref": "#/components/schemas/EventFilter"
                        }
                    }
                },
                {
                    "name": "pagination",
                    "summary": "Pagination options",
                    "description": "Pagination options. See \"[Pagination](/rpc/pagination)\" for further details",
                    "required": false,
                    "schema": {
                        "$ref": "#/components/schemas/PaginationOptions"
                    }
                }
            ],
            "result": {
                "name": "event",
                "description": "An event",
                "schema": {
                    "type": "object",
                    "properties": {
                        "latestLedger": {
                            "$ref": "#/components/schemas/LatestLedger"
                        },
                        "events": {
                            "type": "array",
                            "description": "An array of events matching the request filters.",
                            "items": {
                                "$ref": "#/components/schemas/Event"
                            }
                        }
                    }
                }
            },
            "examples": [
                {
                    "name": "getNativeTransferEventsRequestExample",
                    "description": "Example request to the `getEvents` method, filtering for `transfer` events for native Lumens.",
                    "params": [
                        {
                            "name": "startLedger",
                            "value": "211000"
                        },
                        {
                            "name": "filters",
                            "value": [
                                {
                                    "type": "contract",
                                    "contractIds": [
                                        "7dc1ecdf9335199fc9918dbe0c732ce1d1146aa8f29cc9c360afc6a747ae94df"
                                    ],
                                    "topics": [
                                        ["AAAADwAAAAh0cmFuc2Zlcg==", "*", "*", "*"]
                                    ]
                                }
                            ]
                        },
                        {
                            "name": "pagination",
                            "value": {
                                "limit": 2
                            }
                        }
                    ],
                    "result": {
                        "name": "getTransferEventsResultExample",
                        "description": "Example result from the `getEvents` method, filtering for `transfer` events for native Lumens.",
                        "value": {
                            "events": [
                                {
                                    "type": "contract",
                                    "ledger": "211006",
                                    "ledgerClosedAt": "2023-08-03T16:16:12Z",
                                    "contractId": "7dc1ecdf9335199fc9918dbe0c732ce1d1146aa8f29cc9c360afc6a747ae94df",
                                    "id": "0000906263869267968-0000000002",
                                    "pagingToken": "0000906263869267968-0000000002",
                                    "topic": [
                                        "AAAADwAAAAh0cmFuc2Zlcg==",
                                        "AAAAEgAAAAAAAAAAuSCF9kqJ7Wkc6NZqtw5/w1g6jXoKiv1ffuaJxLU+mq4=",
                                        "AAAAEgAAAAGErV5iDTjEuXkwSPfCUOlKEstBD1h/CbogP37IZYfILA==",
                                        "AAAADgAAAAZuYXRpdmUAAA=="
                                    ],
                                    "value": {
                                        "xdr": "AAAACgAAAAAAAAAAAAAAAACYloA="
                                    },
                                    "inSuccessfulContractCall": true
                                },
                                {
                                    "type": "contract",
                                    "ledger": "211014",
                                    "ledgerClosedAt": "2023-08-03T16:16:55Z",
                                    "contractId": "7dc1ecdf9335199fc9918dbe0c732ce1d1146aa8f29cc9c360afc6a747ae94df",
                                    "id": "0000906298229006336-0000000002",
                                    "pagingToken": "0000906298229006336-0000000002",
                                    "topic": [
                                        "AAAADwAAAAh0cmFuc2Zlcg==",
                                        "AAAAEgAAAAAAAAAAuSCF9kqJ7Wkc6NZqtw5/w1g6jXoKiv1ffuaJxLU+mq4=",
                                        "AAAAEgAAAAGErV5iDTjEuXkwSPfCUOlKEstBD1h/CbogP37IZYfILA==",
                                        "AAAADgAAAAZuYXRpdmUAAA=="
                                    ],
                                    "value": {
                                        "xdr": "AAAACgAAAAAAAAAAAAAAAACYloA="
                                    },
                                    "inSuccessfulContractCall": true
                                }
                            ],
                            "latestLedger": "212417"
                        }
                    }
                },
                {
                    "name": "getAllEventsRequestExample",
                    "description": "Example request to the `getEvents` method, filtering for all events of all types for any and all contracts.",
                    "params": [
                        {
                            "name": "startLedger",
                            "value": "211000"
                        },
                        {
                            "name": "filters",
                            "value": []
                        },
                        {
                            "name": "pagination",
                            "value": {
                                "limit": 2
                            }
                        }
                    ],
                    "result": {
                        "name": "getAllEventsResultExample",
                        "description": "Example result from the `getEvents` method, filtering for all events of all types for any and all contracts.",
                        "value": {
                            "events": [
                                {
                                    "type": "diagnostic",
                                    "ledger": "211006",
                                    "ledgerClosedAt": "2023-08-03T16:16:12Z",
                                    "contractId": "",
                                    "id": "0000906263869267968-0000000000",
                                    "pagingToken": "0000906263869267968-0000000000",
                                    "topic": [
                                        "AAAADwAAAAdmbl9jYWxsAA==",
                                        "AAAADQAAACCErV5iDTjEuXkwSPfCUOlKEstBD1h/CbogP37IZYfILA==",
                                        "AAAADwAAAAppbnNlcnRjb2luAAA="
                                    ],
                                    "value": {
                                        "xdr": "AAAAEgAAAAAAAAAAuSCF9kqJ7Wkc6NZqtw5/w1g6jXoKiv1ffuaJxLU+mq4="
                                    },
                                    "inSuccessfulContractCall": true
                                },
                                {
                                    "type": "diagnostic",
                                    "ledger": "211006",
                                    "ledgerClosedAt": "2023-08-03T16:16:12Z",
                                    "contractId": "84ad5e620d38c4b9793048f7c250e94a12cb410f587f09ba203f7ec86587c82c",
                                    "id": "0000906263869267968-0000000001",
                                    "pagingToken": "0000906263869267968-0000000001",
                                    "topic": [
                                        "AAAADwAAAAdmbl9jYWxsAA==",
                                        "AAAADQAAACB9wezfkzUZn8mRjb4Mcyzh0RRqqPKcycNgr8anR66U3w==",
                                        "AAAADwAAAAh0cmFuc2Zlcg=="
                                    ],
                                    "value": {
                                        "xdr": "AAAAEAAAAAEAAAADAAAAEgAAAAAAAAAAuSCF9kqJ7Wkc6NZqtw5/w1g6jXoKiv1ffuaJxLU+mq4AAAASAAAAAYStXmINOMS5eTBI98JQ6UoSy0EPWH8JuiA/fshlh8gsAAAACgAAAAAAAAAAAAAAAACYloA="
                                    },
                                    "inSuccessfulContractCall": true
                                }
                            ],
                            "latestLedger": 212476
                        }
                    }
                }
            ]
        },
        {
            "name": "getHealth",
            "summary": "General node health check.",
            "params": [],
            "result": {
                "name": "status",
                "description": "\"healthy\"",
                "schema": {
                    "type": "string"
                }
            },
            "examples": [
                {
                    "name": "getHealthRequestExample",
                    "description": "Example request to the `getHealth` method.",
                    "params": [],
                    "result": {
                        "name": "getHealthResultExample",
                        "description": "Example result from the `getHealth` method.",
                        "value": {
                            "status": "healthy"
                        }
                    }
                }
            ]
        },
        {
            "name": "getLatestLedger",
            "summary": "For finding out the current latest known ledger of this node.",
            "description": "For finding out the current latest known ledger of this node. This is a subset of the ledger info from Horizon.",
            "params": [],
            "result": {
                "name": "ledger",
                "description": "The most recent ledger included in the blockchain history",
                "schema": {
                    "$ref": "#/components/schemas/Ledger"
                }
            },
            "examples": [
                {
                    "name": "getLatestLedgerRequestExample",
                    "description": "Example request to the `getLatestLedger` method.",
                    "params": [],
                    "result": {
                        "name": "getLatestLedgerResultExample",
                        "description": "Example result from the `getLatestLedger` method.",
                        "value": {
                            "id": "e7bee7c9d380abea1290acf537cad7034d32bcce9329810e5ce3ee8649b5234c",
                            "protocolVersion": "20",
                            "sequence": 212670
                        }
                    }
                }
            ]
        },
        {
            "name": "getLedgerEntries",
            "summary": "For reading the current value of ledger entries directly.",
            "description": "For reading the current value of ledger entries directly.\n\nAllows you to directly inspect the current state of a contract, a contract's code, or any other ledger entry. This is a backup way to access your contract data which may not be available via events or `simulateTransaction`.\n\nTo fetch contract wasm byte-code, use the ContractCode ledger entry key.",
            "paramStructure": "by-name",
            "params": [
                {
                    "name": "keys",
                    "description": "`<xdr.LedgerKey[]>` Array containing the keys of the ledger entries you wish to retrieve. (an array of serialized base64 strings)",
                    "required": true,
                    "schema": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        }
                    }
                }
            ],
            "result": {
                "name": "ledgerEntries",
                "schema": {
                    "type": "object",
                    "properties": {
                        "entries": {
                            "type": "array",
                            "items": {
                                "$ref": "#/components/schemas/LedgerEntry"
                            }
                        },
                        "latestLedger": {
                            "$ref": "#/components/schemas/LatestLedger"
                        }
                    }
                }
            },
            "examples": [
                {
                    "name": "getLedgerEntriesSymbolRequestExample",
                    "description": "Example request to the `getLedgerEntries` method, retrieving a ledger key derived from a `symbol`.",
                    "params": [
                        {
                            "name": "keys",
                            "value": [
                                "AAAABgAAAAHXDJSei10/zjdrac9oJFSOHomPA5opXy7Gaimd07UhhgAAAA8AAAAHQ09VTlRFUgAAAAABAAAAAA=="
                            ]
                        }
                    ],
                    "result": {
                        "name": "getLedgerEntriesSymbolResultExample",
                        "value": {
                            "entries": [
                                {
                                    "key": "AAAABgAAAAHXDJSei10/zjdrac9oJFSOHomPA5opXy7Gaimd07UhhgAAAA8AAAAHQ09VTlRFUgAAAAABAAAAAA==",
                                    "xdr": "AAAABgAAAAHXDJSei10/zjdrac9oJFSOHomPA5opXy7Gaimd07UhhgAAAA8AAAAHQ09VTlRFUgAAAAABAAAAAAAAAAAAAAADAAAABQBjkc8=",
                                    "lastModifiedLedgerSeq": "213391"
                                }
                            ],
                            "latestLedger": "213472"
                        }
                    }
                },
                {
                    "name": "getLedgerEntriesContractInstanceRequestExample",
                    "description": "Example request to the `getLedgerEntries` method, retrieving a contract's instance ledger entry.",
                    "params": [
                        {
                            "name": "keys",
                            "value": [
                                "AAAABgAAAAHWJ4c0Y4HYQn3Ai3EroCBdscbEjAS+7ud+Cv3S7Y293QAAABQAAAABAAAAAA=="
                            ]
                        }
                    ],
                    "result": {
                        "name": "getLedgerEntriesContractInstanceResultExample",
                        "description": "Example result from the `getLedgerEntries` method, retrieving a contract's instance ledger entry.",
                        "value": {
                            "entries": [
                                {
                                    "key": "AAAABgAAAAHWJ4c0Y4HYQn3Ai3EroCBdscbEjAS+7ud+Cv3S7Y293QAAABQAAAABAAAAAA==",
                                    "xdr": "AAAABgAAAAHWJ4c0Y4HYQn3Ai3EroCBdscbEjAS+7ud+Cv3S7Y293QAAABQAAAABAAAAAAAAAAAAAAATAAAAALnBupvoT7RHZ+oTeaPHSiSufpac3O3mc0u663Kqbko/AAAAAQAAAAEAAAAPAAAAB0NPVU5URVIAAAAAAwAAAAUAY4/B",
                                    "lastModifiedLedgerSeq": "212865"
                                }
                            ],
                            "latestLedger": "213502"
                        }
                    }
                }
            ]
        },
        {
            "name": "getNetwork",
            "summary": "General info about the currently configured network.",
            "params": [],
            "result": {
                "name": "networkConfig",
                "schema": {
                    "type": "object",
                    "required": [
                        "passphrase",
                        "protocolVersion"
                    ],
                    "properties": {
                        "friendbotUrl": {
                            "type": "string",
                            "description": "The URL of this network's \"friendbot\" faucet"
                        },
                        "passphrase": {
                            "type": "string",
                            "description": "Network passphrase configured"
                        },
                        "protocolVersion": {
                            "$ref": "#/components/schemas/ProtocolVersion"
                        }
                    }
                }
            },
            "examples": [
                {
                    "name": "getNetworkRequestExample",
                    "description": "Example request to the `getNetwork` method.",
                    "params": [],
                    "result": {
                        "name": "getNetworkResultExample",
                        "description": "Example result from the `getNetwork` method.",
                        "value": {
                            "friendbotUrl": "https://friendbot-futurenet.stellar.org/",
                            "passphrase": "Test SDF Future Network ; October 2022",
                            "protocolVersion": "20"
                        }
                    }
                }
            ]
        },
        {
            "name": "getTransaction",
            "summary": "Clients will poll this to tell when the transaction has been completed",
            "paramStructure": "by-name",
            "params": [
                {
                    "$ref": "#/components/schemas/TransactionHash"
                }
            ],
            "result": {
                "name": "transaction",
                "description": "Information for a specific Stellar transaction",
                "schema": {
                    "$ref": "#/components/schemas/Transaction"
                }
            },
            "examples": [
                {
                    "name": "getTransactionRequestSuccessExample",
                    "description": "Example request to the `getTransaction` method, with a successful transaction.",
                    "params": [
                        {
                            "name": "hash",
                            "value": "2c36d7635fef2133aa7b6fffed9b3b559035be397e7b119a0b618ffdded83d35"
                        }
                    ],
                    "result": {
                        "name": "getTransactionResultSuccessExample",
                        "description": "Example result from the `getTransaction` method, with a successful transaction.",
                        "value": {
                            "status": "SUCCESS",
                            "latestLedger": "213633",
                            "latestLedgerCloseTime": "1691093171",
                            "oldestLedger": "212194",
                            "oldestLedgerCloseTime": "1691085609",
                            "applicationOrder": 1,
                            "envelopeXdr": "AAAAAgAAAADCvYa5Cg8IoWEIMxgF02ONoD60MXEH8X8M3xiVrskTAwAAWOsAA0IjAAAABgAAAAAAAAAAAAAAAQAAAAAAAAAYAAAAAAAAAAMAAAASAAAAAbLedC7NVbbBoFHnrlR69nQG1EZJtPjNDF00iar+geB/AAAADwAAAAVoZWxsbwAAAAAAAA8AAAAGZnJpZW5kAAAAAAAAAAAAAQAAAAAAAAACAAAABgAAAAGy3nQuzVW2waBR565UevZ0BtRGSbT4zQxdNImq/oHgfwAAABQAAAABAAAAAAAAAAd8h5wHnoyd3mug/5MLyMkMiZH0XiFebmBvzGPLm4HVggAAAAAAAAAAABAW4wAAAyQAAAAAAAAA+AAAAAAAAAAxAAAAAa7JEwMAAABAMO0Q5P1qxj1nXuWG+JJMFatypAC4tUB88rFkp6eZng01OHZasAgcvqVNeArNcn+NyA7MG8eS9+/SzpKQ4vsKDQ==",
                            "resultXdr": "AAAAAAAAVvAAAAAAAAAAAQAAAAAAAAAYAAAAAA3o+K+pQtZvvn57XFe8fqRodD84a2JcE+oOqf1LAvTlAAAAAA==",
                            "resultMetaXdr": "AAAAAwAAAAAAAAACAAAAAwADQikAAAAAAAAAAMK9hrkKDwihYQgzGAXTY42gPrQxcQfxfwzfGJWuyRMDAAAAF0h0zSkAA0IjAAAABQAAAAAAAAAAAAAAAAAAAAABAAAAAAAAAAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAgAAAAAAAAAAAAAAAAAAAAMAAAAAAANCKAAAAABkzAbfAAAAAAAAAAEAA0IpAAAAAAAAAADCvYa5Cg8IoWEIMxgF02ONoD60MXEH8X8M3xiVrskTAwAAABdIdM0pAANCIwAAAAYAAAAAAAAAAAAAAAAAAAAAAQAAAAAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAIAAAAAAAAAAAAAAAAAAAADAAAAAAADQikAAAAAZMwG5QAAAAAAAAABAAAAAAAAAAIAAAADAANCKQAAAAAAAAAAwr2GuQoPCKFhCDMYBdNjjaA+tDFxB/F/DN8Yla7JEwMAAAAXSHTNKQADQiMAAAAGAAAAAAAAAAAAAAAAAAAAAAEAAAAAAAAAAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAACAAAAAAAAAAAAAAAAAAAAAwAAAAAAA0IpAAAAAGTMBuUAAAAAAAAAAQADQikAAAAAAAAAAMK9hrkKDwihYQgzGAXTY42gPrQxcQfxfwzfGJWuyRMDAAAAF0h0zVoAA0IjAAAABgAAAAAAAAAAAAAAAAAAAAABAAAAAAAAAAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAgAAAAAAAAAAAAAAAAAAAAMAAAAAAANCKQAAAABkzAblAAAAAAAAAAEAAAAAAAAAAAAAABAAAAABAAAAAgAAAA8AAAAFSGVsbG8AAAAAAAAPAAAABmZyaWVuZAAAAAAAAgAAAAEAAAAAAAAAAAAAAAIAAAAAAAAAAwAAAA8AAAAHZm5fY2FsbAAAAAANAAAAILLedC7NVbbBoFHnrlR69nQG1EZJtPjNDF00iar+geB/AAAADwAAAAVoZWxsbwAAAAAAAA8AAAAGZnJpZW5kAAAAAAABAAAAAAAAAAGy3nQuzVW2waBR565UevZ0BtRGSbT4zQxdNImq/oHgfwAAAAIAAAAAAAAAAgAAAA8AAAAJZm5fcmV0dXJuAAAAAAAADwAAAAVoZWxsbwAAAAAAABAAAAABAAAAAgAAAA8AAAAFSGVsbG8AAAAAAAAPAAAABmZyaWVuZAAA",
                            "ledger": "213545",
                            "createdAt": "1691092709"
                        }
                    }
                },
                {
                    "name": "getTransactionRequestFailedExample",
                    "description": "Example request to the `getTransaction` method, with a failed transaction.",
                    "params": [
                        {
                            "name": "hash",
                            "value": "6ff9b5cb37cfa254805fe878cf311776cea82105edaba4bcb9f97ca8b7a97b19"
                        }
                    ],
                    "result": {
                        "name": "getTransactionResultFailedExample",
                        "description": "Example result from the `getTransaction` method, with a failed transaction.",
                        "value": {
                            "status": "FAILED",
                            "latestLedger": "213867",
                            "latestLedgerCloseTime": "1691094409",
                            "oldestLedger": "212428",
                            "oldestLedgerCloseTime": "1691086838",
                            "applicationOrder": 1,
                            "envelopeXdr": "AAAAAgAAAAAweuvrGNXYMDuuLLxJV4lFbybQ43T5RyrvsEdFJmFeygAC+9sAA0NHAAAAAQAAAAAAAAAAAAAAAQAAAAAAAAAYAAAAAAAAAAMAAAASAAAAAQNhwg6rWEEMAh2Ygpz+JDp7CT1wwLi/lkJ0AWVwCHz2AAAADwAAAAh3aXRoZHJhdwAAABIAAAAAAAAAADB66+sY1dgwO64svElXiUVvJtDjdPlHKu+wR0UmYV7KAAAAAQAAAAAAAAAAAAAAAQNhwg6rWEEMAh2Ygpz+JDp7CT1wwLi/lkJ0AWVwCHz2AAAACHdpdGhkcmF3AAAAAQAAABIAAAAAAAAAADB66+sY1dgwO64svElXiUVvJtDjdPlHKu+wR0UmYV7KAAAAAAAAAAEAAAAAAAAAAgAAAAYAAAABfcHs35M1GZ/JkY2+DHMs4dEUaqjynMnDYK/Gp0eulN8AAAAUAAAAAQAAAAAAAAAHyKXmp10IvrHT7CRTM1k4AzxM7Y7+3KW1cVXYn2q48zwAAAAAAAAABAAAAAAAAAAAMHrr6xjV2DA7riy8SVeJRW8m0ON0+Ucq77BHRSZhXsoAAAAAAAAAALV7NQ1XnD+MN43YAFaA/Aw3FJEq8kVS96Y1kCG5NRGWAAAABgAAAAEDYcIOq1hBDAIdmIKc/iQ6ewk9cMC4v5ZCdAFlcAh89gAAABQAAAABAAAAAAAAAAYAAAABfcHs35M1GZ/JkY2+DHMs4dEUaqjynMnDYK/Gp0eulN8AAAAQAAAAAQAAAAIAAAAPAAAACUFsbG93YW5jZQAAAAAAABEAAAABAAAAAgAAAA8AAAAEZnJvbQAAABIAAAAAAAAAALV7NQ1XnD+MN43YAFaA/Aw3FJEq8kVS96Y1kCG5NRGWAAAADwAAAAdzcGVuZGVyAAAAABIAAAABA2HCDqtYQQwCHZiCnP4kOnsJPXDAuL+WQnQBZXAIfPYAAAAAAAAAAABMQLkAAB4wAAAFHAAADXgAAAAAAAACogAAAAEmYV7KAAAAQFwdtwQFNPUbgk6AFTzNC6q/6UDKmztO1yWM0p5241cuDwkCGyrCtPlvF4wBXIaWUogVknNyu6J4eHjiPXQSxA4=",
                            "resultXdr": "AAAAAAAC+k3/////AAAAAQAAAAAAAAAY/////QAAAAA=",
                            "resultMetaXdr": "AAAAAwAAAAAAAAACAAAAAwADQ2UAAAAAAAAAADB66+sY1dgwO64svElXiUVvJtDjdPlHKu+wR0UmYV7KAAAAF0hz7bMAA0NHAAAAAAAAAAAAAAAAAAAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAQADQ2UAAAAAAAAAADB66+sY1dgwO64svElXiUVvJtDjdPlHKu+wR0UmYV7KAAAAF0hz7bMAA0NHAAAAAQAAAAAAAAAAAAAAAAAAAAABAAAAAAAAAAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAgAAAAAAAAAAAAAAAAAAAAMAAAAAAANDZQAAAABkzA1rAAAAAAAAAAAAAAACAAAAAwADQ2UAAAAAAAAAADB66+sY1dgwO64svElXiUVvJtDjdPlHKu+wR0UmYV7KAAAAF0hz7bMAA0NHAAAAAQAAAAAAAAAAAAAAAAAAAAABAAAAAAAAAAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAgAAAAAAAAAAAAAAAAAAAAMAAAAAAANDZQAAAABkzA1rAAAAAAAAAAEAA0NlAAAAAAAAAAAweuvrGNXYMDuuLLxJV4lFbybQ43T5RyrvsEdFJmFeygAAABdIc/BVAANDRwAAAAEAAAAAAAAAAAAAAAAAAAAAAQAAAAAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAIAAAAAAAAAAAAAAAAAAAADAAAAAAADQ2UAAAAAZMwNawAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAA=",
                            "ledger": "213861",
                            "createdAt": "1691094379"
                        }
                    }
                },
                {
                    "name": "getTransactionRequestNotFoundExample",
                    "description": "Example request to the `getTransaction` method, with a transaction that cannot be found.",
                    "params": [
                        {
                            "name": "hash",
                            "value": "744a5ec967e24f4bf09f9ea7daf0547dae5ae40f81ef1a4e977ff778867acecb"
                        }
                    ],
                    "result": {
                        "name": "getTransactionResultNotFoundExample",
                        "description": "Example result from the `getTransaction` method, with a transaction that cannot be found.",
                        "value": {
                            "status": "NOT_FOUND",
                            "latestLedger": "213682",
                            "latestLedgerCloseTime": "1691093434",
                            "oldestLedger": "212243",
                            "oldestLedgerCloseTime": "1691085864"
                        }
                    }
                }
            ]
        },
        {
            "name": "sendTransaction",
            "summary": "Submit a real transaction to the Stellar network.",
            "description": "Submit a real transaction to the Stellar network. This is the only way to make changes \"on-chain\".\n\nUnlike Horizon, this does not wait for transaction completion. It simply validates and enqueues the transaction. Clients should call getTransaction to learn about transaction success/failure.\n\nThis supports all transactions, not only smart contract-related transactions.",
            "paramStructure": "by-name",
            "params": [
                {
                    "name": "transaction",
                    "description": "The signed transaction to broadcast (serialized in base64)",
                    "required": true,
                    "schema": {
                        "type": "string"
                    }
                }
            ],
            "result": {
                "name": "TransactionSendResult",
                "schema": {
                    "$ref": "#/components/schemas/TransactionSendResult"
                }
            },
            "examples": [
                {
                    "name": "sendTransactionPendingRequestExample",
                    "description": "Example request to the `sendTransaction` method, resulting in a `PENDING` status.",
                    "params": [
                        {
                            "name": "transaction",
                            "value": "AAAAAgAAAAByF8RlL1sW25Zf0/Y1JeEi7QUPP4W83reTtAfkkQj3agAAAGQAA0OXAAAAAQAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAEAAAAAAAAACgAAAAVoZWxsbwAAAAAAAAEAAAAHc29yb2JhbgAAAAAAAAAAAZEI92oAAABAQ7V/VmoIM0rtK65c4Zz2MElYGo1Qs/wtKhAq6nGFt6Qc+N5yw7SG0KqDIpJmgsk2ERT5luxBiNTrUS9EbnHDBg=="
                        }
                    ],
                    "result": {
                        "name": "sendTransactionPendingResultExample",
                        "description": "Example result from the `sendTransaction` method, resulting in a `PENDING` status.",
                        "value": {
                            "status": "PENDING",
                            "hash": "c9e93c9b715aa2f7d1011c308e4a43820f00913635935c5f66b84f1fcbd8cf25",
                            "latestLedger": "213921",
                            "latestLedgerCloseTime": "1691094694"
                        }
                    }
                },
                {
                    "name": "sendTransactionErrorRequestExample",
                    "description": "Example request to the `sendTransaction` method, resulting in a `ERROR` status.",
                    "params": [
                        {
                            "name": "transaction",
                            "value": "AAAAAgAAAAByF8RlL1sW25Zf0/Y1JeEi7QUPP4W83reTtAfkkQj3agAAAGQAA0OXAAAAAQAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAEAAAAAAAAACgAAAAVoZWxsbwAAAAAAAAEAAAAHc29yb2JhbgAAAAAAAAAAAZEI92oAAABAQ7V/VmoIM0rtK65c4Zz2MElYGo1Qs/wtKhAq6nGFt6Qc+N5yw7SG0KqDIpJmgsk2ERT5luxBiNTrUS9EbnHDBg=="
                        }
                    ],
                    "result": {
                        "name": "sendTransactionErrorResultExample",
                        "description": "Example result from the `sendTransaction` method, resulting in a `ERROR` status.",
                        "value": {
                            "errorResultXdr": "AAAAAAAAAGT////7AAAAAA==",
                            "status": "ERROR",
                            "hash": "c9e93c9b715aa2f7d1011c308e4a43820f00913635935c5f66b84f1fcbd8cf25",
                            "latestLedger": "213956",
                            "latestLedgerCloseTime": "1691094878"
                        }
                    }
                },
                {
                    "name": "sendTransactionDuplicateRequestExample",
                    "description": "Example request to the `sendTransaction` method, resulting in a `DUPLICATE` status.",
                    "params": [
                        {
                            "name": "transaction",
                            "value": "AAAAAgAAAAByF8RlL1sW25Zf0/Y1JeEi7QUPP4W83reTtAfkkQj3agAAAGQAA0OXAAAAAQAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAEAAAAAAAAACgAAAAVoZWxsbwAAAAAAAAEAAAAHc29yb2JhbgAAAAAAAAAAAZEI92oAAABAQ7V/VmoIM0rtK65c4Zz2MElYGo1Qs/wtKhAq6nGFt6Qc+N5yw7SG0KqDIpJmgsk2ERT5luxBiNTrUS9EbnHDBg=="
                        }
                    ],
                    "result": {
                        "name": "sendTransactionDuplicateResultExample",
                        "description": "Example result from the `sendTransaction` method, resulting in a `DUPLICATE` status.",
                        "value": {
                            "status": "DUPLICATE",
                            "hash": "19253aff2d94e9bb75af0e0ed1fd9f45ea13e9898a120bb6a86622f7251cc1f3",
                            "latestLedger": "213985",
                            "latestLedgerCloseTime": "1691095029"
                        }
                    }
                },
                {
                    "name": "sendTransactionTryAgainLaterRequestExample",
                    "description": "Example request to the `sendTransaction` method, resulting in a `TRY_AGAIN_LATER` status.",
                    "params": [
                        {
                            "name": "transaction",
                            "value": "AAAAAgAAAAByF8RlL1sW25Zf0/Y1JeEi7QUPP4W83reTtAfkkQj3agAAAGQAA0OXAAAAAQAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAEAAAAAAAAACgAAAAVoZWxsbwAAAAAAAAEAAAAHc29yb2JhbgAAAAAAAAAAAZEI92oAAABAQ7V/VmoIM0rtK65c4Zz2MElYGo1Qs/wtKhAq6nGFt6Qc+N5yw7SG0KqDIpJmgsk2ERT5luxBiNTrUS9EbnHDBg=="
                        }
                    ],
                    "result": {
                        "name": "sendTransactionTryAgainLaterResultExample",
                        "description": "Example result from the `sendTransaction` method, resulting in a `TRY_AGAIN_LATER` status.",
                        "value": {
                            "status": "TRY_AGAIN_LATER",
                            "hash": "19253aff2d94e9bb75af0e0ed1fd9f45ea13e9898a120bb6a86622f7251cc1f3",
                            "latestLedger": "213990",
                            "latestLedgerCloseTime": "1691095054"
                        }
                    }
                }
            ]
        },
        {
            "name": "simulateTransaction",
            "summary": "Submit a trial contract invocation to simulate how it would be executed by the network.",
            "description": "Submit a trial contract invocation to simulate how it would be executed by the network. This endpoint calculates the effective transaction data, required authorizations, and minimal resource fee. It provides a way to test and analyze the potential outcomes of a transaction without actually submitting it to the network.",
            "paramStructure": "by-name",
            "params": [
                {
                    "name": "transaction",
                    "description": "The transaction to be simulated (serialized in base64)",
                    "required": true,
                    "schema": {
                        "type": "string"
                    }
                }
            ],
            "result": {
                "name": "TransactionSimulationResult",
                "schema": {
                    "$ref": "#/components/schemas/TransactionSimulationResult"
                }
            },
            "examples": [
                {
                    "name": "simulateTransactionRequestExample",
                    "description": "Example request to the `simulateTransaction` method.",
                    "params": [
                        {
                            "name": "transaction",
                            "value": "AAAAAgAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAGQAAAAAAAAAAQAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAEAAAAAAAAAGAAAAAAAAAADAAAAEgAAAAEDYcIOq1hBDAIdmIKc/iQ6ewk9cMC4v5ZCdAFlcAh89gAAAA8AAAAId2l0aGRyYXcAAAASAAAAAAAAAAAweuvrGNXYMDuuLLxJV4lFbybQ43T5RyrvsEdFJmFeygAAAAAAAAAAAAAAAA=="
                        }
                    ],
                    "result": {
                        "name": "simulateTransactionResultExample",
                        "description": "Example result from the `simulateTransaction` method.",
                        "value": {
                            "transactionData": "AAAAAAAAAAIAAAAGAAAAAX3B7N+TNRmfyZGNvgxzLOHRFGqo8pzJw2CvxqdHrpTfAAAAFAAAAAEAAAAAAAAAB8il5qddCL6x0+wkUzNZOAM8TO2O/tyltXFV2J9quPM8AAAAAAAAAAUAAAAAAAAAADB66+sY1dgwO64svElXiUVvJtDjdPlHKu+wR0UmYV7KAAAAAAAAAAC1ezUNV5w/jDeN2ABWgPwMNxSRKvJFUvemNZAhuTURlgAAAAYAAAAAAAAAADB66+sY1dgwO64svElXiUVvJtDjdPlHKu+wR0UmYV7KAAAAFSgXO/qZwmefAAAAAAAAAAAAAAAGAAAAAQNhwg6rWEEMAh2Ygpz+JDp7CT1wwLi/lkJ0AWVwCHz2AAAAFAAAAAEAAAAAAAAABgAAAAF9wezfkzUZn8mRjb4Mcyzh0RRqqPKcycNgr8anR66U3wAAABAAAAABAAAAAgAAAA8AAAAJQWxsb3dhbmNlAAAAAAAAEQAAAAEAAAACAAAADwAAAARmcm9tAAAAEgAAAAAAAAAAtXs1DVecP4w3jdgAVoD8DDcUkSryRVL3pjWQIbk1EZYAAAAPAAAAB3NwZW5kZXIAAAAAEgAAAAEDYcIOq1hBDAIdmIKc/iQ6ewk9cMC4v5ZCdAFlcAh89gAAAAAAAAAAAE0AwQAAHqQAAAXkAAAOtAAAAAAAAALg",
                            "events": [
                                "AAAAAQAAAAAAAAAAAAAAAgAAAAAAAAADAAAADwAAAAdmbl9jYWxsAAAAAA0AAAAgA2HCDqtYQQwCHZiCnP4kOnsJPXDAuL+WQnQBZXAIfPYAAAAPAAAACHdpdGhkcmF3AAAAEgAAAAAAAAAAMHrr6xjV2DA7riy8SVeJRW8m0ON0+Ucq77BHRSZhXso=",
                                "AAAAAQAAAAAAAAABA2HCDqtYQQwCHZiCnP4kOnsJPXDAuL+WQnQBZXAIfPYAAAACAAAAAAAAAAMAAAAPAAAAB2ZuX2NhbGwAAAAADQAAACB9wezfkzUZn8mRjb4Mcyzh0RRqqPKcycNgr8anR66U3wAAAA8AAAANdHJhbnNmZXJfZnJvbQAAAAAAABAAAAABAAAABAAAABIAAAABA2HCDqtYQQwCHZiCnP4kOnsJPXDAuL+WQnQBZXAIfPYAAAASAAAAAAAAAAC1ezUNV5w/jDeN2ABWgPwMNxSRKvJFUvemNZAhuTURlgAAABIAAAAAAAAAADB66+sY1dgwO64svElXiUVvJtDjdPlHKu+wR0UmYV7KAAAACgAAAAAAAAAAAAAAAAABgnY=",
                                "AAAAAQAAAAAAAAABfcHs35M1GZ/JkY2+DHMs4dEUaqjynMnDYK/Gp0eulN8AAAABAAAAAAAAAAQAAAAPAAAACHRyYW5zZmVyAAAAEgAAAAAAAAAAtXs1DVecP4w3jdgAVoD8DDcUkSryRVL3pjWQIbk1EZYAAAASAAAAAAAAAAAweuvrGNXYMDuuLLxJV4lFbybQ43T5RyrvsEdFJmFeygAAAA4AAAAGbmF0aXZlAAAAAAAKAAAAAAAAAAAAAAAAAAGCdg==",
                                "AAAAAQAAAAAAAAABfcHs35M1GZ/JkY2+DHMs4dEUaqjynMnDYK/Gp0eulN8AAAACAAAAAAAAAAIAAAAPAAAACWZuX3JldHVybgAAAAAAAA8AAAANdHJhbnNmZXJfZnJvbQAAAAAAAAE=",
                                "AAAAAQAAAAAAAAABA2HCDqtYQQwCHZiCnP4kOnsJPXDAuL+WQnQBZXAIfPYAAAACAAAAAAAAAAIAAAAPAAAACWZuX3JldHVybgAAAAAAAA8AAAAId2l0aGRyYXcAAAAB"
                            ],
                            "minResourceFee": "227048",
                            "results": [
                                {
                                    "auth": [
                                        "AAAAAQAAAAAAAAAAMHrr6xjV2DA7riy8SVeJRW8m0ON0+Ucq77BHRSZhXsooFzv6mcJnnwAAAAAAAAAAAAAAAAAAAAEDYcIOq1hBDAIdmIKc/iQ6ewk9cMC4v5ZCdAFlcAh89gAAAAh3aXRoZHJhdwAAAAEAAAASAAAAAAAAAAAweuvrGNXYMDuuLLxJV4lFbybQ43T5RyrvsEdFJmFeygAAAAA="
                                    ],
                                    "xdr": "AAAAAQ=="
                                }
                            ],
                            "cost": {
                                "cpuInsns": "4388231",
                                "memBytes": "383507"
                            },
                            "latestLedger": "214343"
                        }
                    }
                }
            ]
        }
    ],
    "components": {
        "schemas": {
            "LatestLedger": {
                "name": "latestLedger",
                "description": "Stringified-number of the current latest ledger observed by the node when this response was generated.",
                "schema": {
                    "type": "string"
                }
            },
            "LatestLedgerCloseTime": {
                "name": "latestLedgerCloseTime",
                "description": "The unix timestamp of the close time of the latest ledger known to Soroban-RPC at the time it handled the request.",
                "schema": {
                    "type": "string"
                }
            },
            "ProtocolVersion": {
                "name": "protocolVersion",
                "description": "Stellar Core protocol version associated with the latest ledger",
                "schema": {
                    "type": "string"
                }
            },
            "TransactionHash": {
                "name": "hash",
                "description": "The transaction hash, as a hex-encoded string.",
                "schema": {
                    "type": "string",
                    "minLength": 64,
                    "maxLength": 64,
                    "pattern": "^[a-fA-F0-9]{64}$"
                }
            },
            "EventFilter": {
                "type": "object",
                "title": "EventFilter",
                "required": [],
                "properties": {
                    "type": {
                        "type": "string",
                        "enum": [
                            "system",
                            "contract",
                            "diagnostic"
                        ],
                        "description": "A comma separated list of event types (`system`, `contract`, or `diagnostic`) used to filter events. If omitted, all event types are included."
                    },
                    "contractIds": {
                        "type": "array",
                        "description": "List of contract ids to query for events. If omitted, return events for all contracts. Maximum 5 contract IDs are allowed per request.",
                        "maxItems": 5,
                        "items": {
                            "type": "string",
                            "description": "A contract ID, as a hex-encoded string"
                        }
                    },
                    "topics": {
                        "type": "array",
                        "description": "List of topic filters. If omitted, query for all events. If multiple filters are specified, events will be included if they match any of the filters. Maximum 5 filters are allowed per request.\n- A `TopicFilter` is `SegmentMatcher[]`\n  - The list can be 1-4 `SegmentMatcher`s long.\n- A `SegmentMatcher` is one of the following:\n  - For an exact segment match, a string containing base64-encoded ScVal\n  - For a wildcard single-segment match, the string \"*\" matches exactly one segment.\n- Examples of matching token transfer events. Events are emitted here: [rs-soroban-env/event.rs at 924d86cacd58b8a162344bfe0ab37d9668f5d629](https://github.com/stellar/rs-soroban-env/blob/924d86cacd58b8a162344bfe0ab37d9668f5d629/soroban-env-host/src/native_contract/token/event.rs#L21-L33). I've decoded the base64-encoded ScVals for easier reading (both the symbols and addresses). In real usage, the `ScSymbol(\"transfer\").toXdr().toString(\"base64\")`, and `ScBinary(pubkeyBytes).toXdr().toString(\"base64\")`, would be base64 encoded strings for exact matches. For example:\n  - `[ScSymbol(\"transfer\"), \"*\", \"*\"]`\n    - Matches any token transfer events\n  - `[ScSymbol(\"transfer\"), \"*\", \"GABC...123\"]`\n    - Matches any token transfer events to recipient: `GABC...123`\n  - `[ScSymbol(\"transfer\"), \"GDEF...456\", \"GABC...123\"]`\n    - Matches only token transfers from `GDEF...456` to `GABC...123`",
                        "items": {
                            "$ref": "#/components/schemas/TopicFilter"
                        }
                    }
                }
            },
            "Event": {
                "type": "object",
                "title": "Event",
                "properties": {
                    "ledger": {
                        "type": "string",
                        "description": "String-ified sequence number of the ledger."
                    },
                    "ledgerClosedAt": {
                        "type": "string",
                        "description": "ISO8601 timestamp of the ledger closing time."
                    },
                    "contractId": {
                        "type": "string",
                        "description": "ID of the emitting contract."
                    },
                    "id": {
                        "type": "string",
                        "description": "Unique identifier for this event.\n- The event's unique id field is based on a [`toid` from Horizon](https://github.com/stellar/go/blob/master/toid/main.go) as used in Horizon's `/effects` endpoint.\n- https://github.com/stellar/go/blob/master/services/horizon/internal/db2/history/effect.go#L58\n- Specifically, it is a string containing:\n  - bigint(32 bit ledger sequence + 20 bit txn number + 12 bit operation) + `<hyphen>` + number for the event within the operation.\n  - For example:\n    - 1234-1"
                    },
                    "pagingToken": {
                        "type": "string",
                        "description": "Duplicate of `id` field, but in the standard place for pagination tokens."
                    },
                    "inSuccessfulContractCall": {
                        "type": "boolean",
                        "description": "If true the event was emitted during a successful contract call."
                    },
                    "topic": {
                        "type": "array",
                        "description": "List containing the topic this event was emitted with.",
                        "items": {
                            "type": "string"
                        }
                    },
                    "value": {
                        "type": "object",
                        "description": "List containing the topic this event was emitted with.",
                        "properties": {
                            "xdr": {
                                "type": "string",
                                "description": "The emitted body value of the event (serialized in a base64 string)."
                            }
                        }
                    }
                }
            },
            "TopicFilter": {
                "type": "array",
                "title": "TopicFilter",
                "description": "List of topic filters. If omitted, query for all events. If multiple filters are specified, events will be included if they match any of the filters. Maximum 5 filters are allowed per request.",
                "maxItems": 5,
                "items": {
                    "$ref": "#/components/schemas/SegmentMatcher"
                }
            },
            "SegmentMatcher": {
                "type": "array",
                "description": "The list can be 1-4 `SegmentMatcher`s long.",
                "minItems": 1,
                "maxItems": 4,
                "items": {
                    "type": "string",
                    "description": "For an exact segment match, a string containing base64-encoded ScVal. For a wildcard single-segment match, the string \"*\", matches exactly one segment."
                }
            },
            "Ledger": {
                "type": "object",
                "title": "Ledger",
                "required": [
                    "id",
                    "protocolVersion",
                    "sequence"
                ],
                "properties": {
                    "id": {
                        "type": "string",
                        "description": "hash of the latest ledger as a hex-encoded string"
                    },
                    "protocolVersion": {
                        "$ref": "#/components/schemas/ProtocolVersion"
                    },
                    "sequence": {
                        "type": "integer",
                        "description": "sequence number of the latest ledger"
                    }
                }
            },
            "LedgerEntry": {
                "type": "object",
                "title": "LedgerEntry",
                "required": [
                    "key",
                    "xdr",
                    "lastModifiedLedgerSeq"
                ],
                "properties": {
                    "key": {
                        "type": "string",
                        "description": "`<xdr.LedgerKey>` The key of the ledger entry (serialized in a base64 string)"
                    },
                    "xdr": {
                        "type": "string",
                        "description": "`<xdr.LedgerEntryData>` The current value of the given ledger entry (serialized in a base64 string)"
                    },
                    "lastModifiedLedgerSeq": {
                        "type": "integer",
                        "description": "The current latest ledger observed by the node when this response was generated."
                    }
                }
            },
            "PaginationOptions": {
                "type": "object",
                "title": "PaginationOptions",
                "properties": {
                    "cursor": {
                        "type": "string",
                        "description": "A string ID that points to a specific location in a collection of responses and is pulled from the paging_token value of a record. When a cursor is provided Soroban-RPC will not include the element whose id matches the cursor in the response. Only elements which appear after the cursor are included."
                    },
                    "limit": {
                        "type": "integer",
                        "description": "The maximum number of records returned. The limit for getEvents can range from 1 to 10000 - an upper limit that is hardcoded in Soroban-RPC for performance reasons. If this argument isn't designated, it defaults to 100."
                    }
                }
            },
            "Transaction": {
                "type": "object",
                "title": "Transaction",
                "required": [
                    "status",
                    "latestLedger",
                    "latestLedgerCloseTime",
                    "oldestLedger",
                    "oldestLedgerCloseTime"
                ],
                "properties": {
                    "status": {
                        "type": "string",
                        "description": "The current status of the transaction",
                        "enum": ["SUCCESS", "NOT_FOUND", "FAILED"]
                    },
                    "latestLedger": {
                        "$ref": "#/components/schemas/LatestLedger"
                    },
                    "latestLedgerCloseTime": {
                        "$ref": "#/components/schemas/LatestLedgerCloseTime"
                    },
                    "oldestLedger": {
                        "type": "string",
                        "description": "The oldest ledger ingested by Soroban-RPC at the time it handled the request"
                    },
                    "oldestLedgerCloseTime": {
                        "type": "string",
                        "description": "The unix timestamp of the close time of the oldest ledger ingested by Soroban-RPC at the time it handled the request"
                    },
                    "ledger": {
                        "type": "string",
                        "description": "The sequence of the ledger which included the transaction. This field is only present if status is `SUCCESS` or `FAILED`"
                    },
                    "createdAt": {
                        "type": "string",
                        "description": "The unix timestamp of when the transaction was included in the ledger. This field is only present if status is `SUCCESS` or `FAILED`"
                    },
                    "applicationOrder": {
                        "type": "integer",
                        "description": "The index of the transaction among all transactions included in the ledger. This field is only present if status is `SUCCESS` or `FAILED`"
                    },
                    "feeBump": {
                        "type": "boolean",
                        "description": "Indicates whether the transaction was fee bumped. This field is only present if status is `SUCCESS` or `FAILED`"
                    },
                    "envelopeXdr": {
                        "type": "string",
                        "description": "`<xdr.TransactionEnvelope>` A base64 encoded string of the raw TransactionEnvelope XDR struct for this transaction"
                    },
                    "resultXdr": {
                        "type": "string",
                        "description": "`<xdr.TransactionResult>` A base64 encoded string of the raw TransactionResult XDR struct for this transaction. This field is only present if status is `SUCCESS` or `FAILED`"
                    },
                    "resultMetaXdr": {
                        "type": "string",
                        "description": "`<xdr.TransactionResultMeta>` A base64 encoded string of the raw TransactionResultMeta XDR struct for this transaction"
                    }
                }
            },
            "TransactionSimulationResult": {
                "type": "object",
                "title": "TransactionSimulationResult",
                "required": [
                    "minResourceFee",
                    "cost",
                    "result",
                    "transactionData",
                    "event",
                    "latestLedger"
                ],
                "properties": {
                    "minResourceFee": {
                        "type": "string",
                        "description": "Stringified-number of the recommended minimum resource fee to add when submitting the transaction. This fee is to be added on top of the [Stellar network fee](https://developers.stellar.org/docs/encyclopedia/fees-surge-pricing-fee-strategies#network-fees-on-stellar)."
                    },
                    "cost": {
                        "type": "object",
                        "description": "Information about instructions used, etc.",
                        "properties": {
                            "cpuInsns": {
                                "type": "string",
                                "description": "Stringified-number of the total cpu instructions consumed by this transaction"
                            },
                            "memBytes": {
                                "type": "string",
                                "description": "Stringified-number of the total memory bytes allocated by this transaction"
                            }
                        }
                    },
                    "results": {
                        "type": "array",
                        "description": "If `error` is present then `results` will not be in the response. This array will only have one element: the result for the Host Function invocation.",
                        "items": {
                            "type": "object",
                            "properties": {
                                "xdr": {
                                    "type": "string",
                                    "description": "`<xdr.ScVal>` Only present on success. xdr-encoded return value of the Host Function call."
                                },
                                "auth": {
                                    "type": "array",
                                    "description": "`<xdr.ContractAuth[]>` Per-address authorizations recorded when simulating this Host Function call. (an array of serialized base64 strings)",
                                    "items": {
                                        "type": "string"
                                    }
                                }
                            }
                        }
                    },
                    "transactionData": {
                        "type": "string",
                        "description": "`<xdr.SorobanTransactionData>` The recommended Soroban Transaction Data to use when submitting the simulated transaction. This data contains the refundable fee and resource usage information such as the ledger footprint and IO access data (serialized in a base64 string)."
                    },
                    "events": {
                        "type": "array",
                        "description": "`<xdr.DiagnosticEvent[]>` Array of the events emitted during the contract invocation(s). The events are ordered by their emission time. (an array of serialized base64 strings)",
                        "items": {
                            "type": "string"
                        }
                    },
                    "latestLedger": {
                        "$ref": "#/components/schemas/LatestLedger"
                    },
                    "error": {
                        "type": "string",
                        "description": "Only present if the transaction failed. This field will include more details from `stellar-core` about why the invoke host function call failed."
                    }
                }
            },
            "TransactionSendResult": {
                "type": "object",
                "title": "TransactionSendResult",
                "required": [
                    "hash",
                    "status",
                    "latestLedger",
                    "latestLedgerCloseTime"
                ],
                "properties": {
                    "hash": {
                        "$ref": "#/components/schemas/TransactionHash"
                    },
                    "status": {
                        "type": "string",
                        "description": "The current status of the transaction by hash\n- `PENDING` - The transaction has been accepted by stellar-core.\n- `DUPLICATE` - The transaction has already been submitted to stellar-core.\n- `TRY_AGAIN_LATER` - The transaction was not included in the previous 4 ledgers and is banned from the next few ledgers.\n- `ERROR` - An error occurred from submitting the transaction to stellar-core.",
                        "enum": ["PENDING", "DUPLICATE", "TRY_AGAIN_LATER", "ERROR"]
                    },
                    "latestLedger": {
                        "$ref": "#/components/schemas/LatestLedger"
                    },
                    "latestLedgerCloseTime": {
                        "$ref": "#/components/schemas/LatestLedgerCloseTime"
                    },
                    "errorResultXdr": {
                        "type": "string",
                        "description": "`<xdr.TransactionResult>` If the transaction status is `ERROR`, this will be a base64 encoded string of the raw TransactionResult XDR struct containing details on why stellar-core rejected the transaction."
                    }
                }
            }
        }
    }
}
