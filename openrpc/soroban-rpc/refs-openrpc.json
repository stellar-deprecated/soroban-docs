{
    "openrpc": "1.2.4",
    "info": {
        "version": "0.9.4",
        "title": "Soroban RPC",
        "description": "A public discussion about the design of soroban-rpc."
    },
    "servers": [
        {
            "url": "https://rpc-futurenet.stellar.org:443",
            "description": "Publicly available RPC server maintained by SDF, operating on the futurenet test network."
        }
    ],
    "methods": [
        {
            "name": "getEvents",
            "summary": "Clients can request a filtered list of events emitted by a given ledger range.",
            "description": "Clients can request a filtered list of events emitted by a given ledger range.\n\nSoroban-RPC will support querying within a maximum 24 hours of recent ledgers.\n\nNote, this could be used by the client to only prompt a refresh when there is a new ledger with relevant events. It should also be used by backend Dapp components to \"ingest\" events into their own database for querying and serving.\n\nIf making multiple requests, clients should deduplicate any events received, based on the event's unique id field. This prevents double-processing in the case of duplicate events being received.\n\nBy default soroban-rpc retains the most recent 24 hours of events.",
            "paramStructure": "by-name",
            "params": [
                {
                    "name": "startLedger",
                    "summary": "Stringified ledger sequence number to fetch events after (inclusive).",
                    "description": "Stringified ledger sequence number to fetch events after (inclusive). This method will return an error if startLedger is less than the oldest ledger stored in this node, or greater than the latest ledger seen by this node. If a cursor is included in the request, startLedger must be omitted.",
                    "required": true,
                    "schema": {
                        "type": "string"
                    }
                },
                {
                    "name": "filters",
                    "summary": "List of filters for the returned events.",
                    "description": "List of filters for the returned events. Events matching any of the filters are included. To match a filter, an event must match both a contractId and a topic. Maximum 5 filters are allowed per request.",
                    "required": true,
                    "schema": {
                        "type": "array",
                        "maxItems": 5,
                        "items": {
                            "$ref": "#/components/schemas/EventFilter"
                        }
                    }
                },
                {
                    "name": "pagination",
                    "summary": "Pagination options",
                    "description": "Pagination options. See \"[Pagination](/rpc/pagination)\" for further details",
                    "required": false,
                    "schema": {
                        "$ref": "#/components/schemas/PaginationOptions"
                    }
                }
            ],
            "result": {
                "name": "event",
                "description": "An event",
                "schema": {
                    "type": "object",
                    "properties": {
                        "latestLedger": {
                            "$ref": "#/components/schemas/LatestLedger"
                        },
                        "events": {
                            "type": "array",
                            "description": "An array of events matching the request filters.",
                            "items": {
                                "$ref": "#/components/schemas/Event"
                            }
                        }
                    }
                }
            },
            "examples": [
                {
                    "name": "getNativeTransferEventsRequestExample",
                    "description": "Example request to the `getEvents` method, filtering for `transfer` events for native Lumens.",
                    "params": [
                        {
                            "name": "startLedger",
                            "value": "211000"
                        },
                        {
                            "name": "filters",
                            "value": [
                                {
                                    "type": "contract",
                                    "contractIds": [
                                        "7dc1ecdf9335199fc9918dbe0c732ce1d1146aa8f29cc9c360afc6a747ae94df"
                                    ],
                                    "topics": [
                                        [
                                            "AAAADwAAAAh0cmFuc2Zlcg==",
                                            "*",
                                            "*",
                                            "*"
                                        ]
                                    ]
                                }
                            ]
                        },
                        {
                            "name": "pagination",
                            "value": {
                                "limit": 2
                            }
                        }
                    ],
                    "result": {
                        "name": "getTransferEventsResultExample",
                        "description": "Example result from the `getEvents` method, filtering for `transfer` events for native Lumens.",
                        "value": {
                            "events": [
                                {
                                    "type": "contract",
                                    "ledger": "211006",
                                    "ledgerClosedAt": "2023-08-03T16:16:12Z",
                                    "contractId": "7dc1ecdf9335199fc9918dbe0c732ce1d1146aa8f29cc9c360afc6a747ae94df",
                                    "id": "0000906263869267968-0000000002",
                                    "pagingToken": "0000906263869267968-0000000002",
                                    "topic": [
                                        "AAAADwAAAAh0cmFuc2Zlcg==",
                                        "AAAAEgAAAAAAAAAAuSCF9kqJ7Wkc6NZqtw5/w1g6jXoKiv1ffuaJxLU+mq4=",
                                        "AAAAEgAAAAGErV5iDTjEuXkwSPfCUOlKEstBD1h/CbogP37IZYfILA==",
                                        "AAAADgAAAAZuYXRpdmUAAA=="
                                    ],
                                    "value": {
                                        "xdr": "AAAACgAAAAAAAAAAAAAAAACYloA="
                                    },
                                    "inSuccessfulContractCall": true
                                },
                                {
                                    "type": "contract",
                                    "ledger": "211014",
                                    "ledgerClosedAt": "2023-08-03T16:16:55Z",
                                    "contractId": "7dc1ecdf9335199fc9918dbe0c732ce1d1146aa8f29cc9c360afc6a747ae94df",
                                    "id": "0000906298229006336-0000000002",
                                    "pagingToken": "0000906298229006336-0000000002",
                                    "topic": [
                                        "AAAADwAAAAh0cmFuc2Zlcg==",
                                        "AAAAEgAAAAAAAAAAuSCF9kqJ7Wkc6NZqtw5/w1g6jXoKiv1ffuaJxLU+mq4=",
                                        "AAAAEgAAAAGErV5iDTjEuXkwSPfCUOlKEstBD1h/CbogP37IZYfILA==",
                                        "AAAADgAAAAZuYXRpdmUAAA=="
                                    ],
                                    "value": {
                                        "xdr": "AAAACgAAAAAAAAAAAAAAAACYloA="
                                    },
                                    "inSuccessfulContractCall": true
                                }
                            ],
                            "latestLedger": "212417"
                        }
                    }
                },
                {
                    "name": "getAllEventsRequestExample",
                    "description": "Example request to the `getEvents` method, filtering for all events of all types for any and all contracts.",
                    "params": [
                        {
                            "name": "startLedger",
                            "value": "211000"
                        },
                        {
                            "name": "filters",
                            "value": []
                        },
                        {
                            "name": "pagination",
                            "value": {
                                "limit": 2
                            }
                        }
                    ],
                    "result": {
                        "name": "getAllEventsResultExample",
                        "description": "Example result from the `getEvents` method, filtering for all events of all types for any and all contracts.",
                        "value": {
                            "events": [
                                {
                                    "type": "diagnostic",
                                    "ledger": "211006",
                                    "ledgerClosedAt": "2023-08-03T16:16:12Z",
                                    "contractId": "",
                                    "id": "0000906263869267968-0000000000",
                                    "pagingToken": "0000906263869267968-0000000000",
                                    "topic": [
                                        "AAAADwAAAAdmbl9jYWxsAA==",
                                        "AAAADQAAACCErV5iDTjEuXkwSPfCUOlKEstBD1h/CbogP37IZYfILA==",
                                        "AAAADwAAAAppbnNlcnRjb2luAAA="
                                    ],
                                    "value": {
                                        "xdr": "AAAAEgAAAAAAAAAAuSCF9kqJ7Wkc6NZqtw5/w1g6jXoKiv1ffuaJxLU+mq4="
                                    },
                                    "inSuccessfulContractCall": true
                                },
                                {
                                    "type": "diagnostic",
                                    "ledger": "211006",
                                    "ledgerClosedAt": "2023-08-03T16:16:12Z",
                                    "contractId": "84ad5e620d38c4b9793048f7c250e94a12cb410f587f09ba203f7ec86587c82c",
                                    "id": "0000906263869267968-0000000001",
                                    "pagingToken": "0000906263869267968-0000000001",
                                    "topic": [
                                        "AAAADwAAAAdmbl9jYWxsAA==",
                                        "AAAADQAAACB9wezfkzUZn8mRjb4Mcyzh0RRqqPKcycNgr8anR66U3w==",
                                        "AAAADwAAAAh0cmFuc2Zlcg=="
                                    ],
                                    "value": {
                                        "xdr": "AAAAEAAAAAEAAAADAAAAEgAAAAAAAAAAuSCF9kqJ7Wkc6NZqtw5/w1g6jXoKiv1ffuaJxLU+mq4AAAASAAAAAYStXmINOMS5eTBI98JQ6UoSy0EPWH8JuiA/fshlh8gsAAAACgAAAAAAAAAAAAAAAACYloA="
                                    },
                                    "inSuccessfulContractCall": true
                                }
                            ],
                            "latestLedger": 212476
                        }
                    }
                }
            ]
        },
        {
            "name": "getHealth",
            "summary": "General node health check.",
            "params": [],
            "result": {
                "name": "Node health",
                "description": "\"healthy\"",
                "schema": {
                    "type": "string"
                }
            },
            "examples": [
                {
                    "name": "getHealthRequestExample",
                    "description": "Example request to the `getHealth` method.",
                    "params": [],
                    "result": {
                        "name": "getHealthResultExample",
                        "description": "Example result from the `getHealth` method.",
                        "value": {
                            "status": "healthy"
                        }
                    }
                }
            ]
        },
        {
            "name": "getLatestLedger",
            "summary": "For finding out the current latest known ledger of this node.",
            "description": "For finding out the current latest known ledger of this node. This is a subset of the ledger info from Horizon.",
            "params": [],
            "result": {
                "name": "Latest ledger",
                "description": "The most recent ledger included in the blockchain history",
                "schema": {
                    "title": "Latest ledger",
                    "$ref": "#/components/schemas/LatestLedger"
                }
            },
            "examples": [
                {
                    "name": "getLatestLedger Request Example",
                    "description": "Example request to the `getLatestLedger` method.",
                    "params": [],
                    "result": {
                        "name": "getLatestLedger Result Example",
                        "description": "Example result from the `getLatestLedger` method.",
                        "value": {
                            "id": "e7bee7c9d380abea1290acf537cad7034d32bcce9329810e5ce3ee8649b5234c",
                            "protocolVersion": "20",
                            "sequence": 212670
                        }
                    }
                }
            ]
        }
    ],
    "components": {
        "schemas": {
            "Event": {
                "type": "object",
                "title": "Event",
                "properties": {
                    "ledger": {
                        "type": "string",
                        "description": "String-ified sequence number of the ledger."
                    },
                    "ledgerClosedAt": {
                        "type": "string",
                        "description": "ISO8601 timestamp of the ledger closing time."
                    },
                    "contractId": {
                        "type": "string",
                        "description": "ID of the emitting contract."
                    },
                    "id": {
                        "type": "string",
                        "description": "Unique identifier for this event.\n- The event's unique id field is based on a [`toid` from Horizon](https://github.com/stellar/go/blob/master/toid/main.go) as used in Horizon's `/effects` endpoint.\n- https://github.com/stellar/go/blob/master/services/horizon/internal/db2/history/effect.go#L58\n- Specifically, it is a string containing:\n  - bigint(32 bit ledger sequence + 20 bit txn number + 12 bit operation) + `<hyphen>` + number for the event within the operation.\n  - For example:\n    - 1234-1"
                    },
                    "pagingToken": {
                        "type": "string",
                        "description": "Duplicate of `id` field, but in the standard place for pagination tokens."
                    },
                    "inSuccessfulContractCall": {
                        "type": "boolean",
                        "description": "If true the event was emitted during a successful contract call."
                    },
                    "topic": {
                        "type": "array",
                        "description": "List containing the topic this event was emitted with.",
                        "items": {
                            "type": "string"
                        }
                    },
                    "value": {
                        "type": "object",
                        "description": "List containing the topic this event was emitted with.",
                        "properties": {
                            "xdr": {
                                "type": "string",
                                "description": "The emitted body value of the event (serialized in a base64 string)."
                            }
                        }
                    }
                }
            },
            "EventFilter": {
                "type": "object",
                "title": "EventFilter",
                "required": [],
                "properties": {
                    "type": {
                        "type": "string",
                        "enum": [
                            "system",
                            "contract",
                            "diagnostic"
                        ],
                        "description": "A comma separated list of event types (`system`, `contract`, or `diagnostic`) used to filter events. If omitted, all event types are included."
                    },
                    "contractIds": {
                        "type": "array",
                        "description": "List of contract ids to query for events. If omitted, return events for all contracts. Maximum 5 contract IDs are allowed per request.",
                        "maxItems": 5,
                        "items": {
                            "type": "string",
                            "description": "A contract ID, as a hex-encoded string"
                        }
                    },
                    "topics": {
                        "type": "array",
                        "description": "List of topic filters. If omitted, query for all events. If multiple filters are specified, events will be included if they match any of the filters. Maximum 5 filters are allowed per request.\n- A `TopicFilter` is `SegmentMatcher[]`\n  - The list can be 1-4 `SegmentMatcher`s long.\n- A `SegmentMatcher` is one of the following:\n  - For an exact segment match, a string containing base64-encoded ScVal\n  - For a wildcard single-segment match, the string \"*\" matches exactly one segment.\n- Examples of matching token transfer events. Events are emitted here: [rs-soroban-env/event.rs at 924d86cacd58b8a162344bfe0ab37d9668f5d629](https://github.com/stellar/rs-soroban-env/blob/924d86cacd58b8a162344bfe0ab37d9668f5d629/soroban-env-host/src/native_contract/token/event.rs#L21-L33). I've decoded the base64-encoded ScVals for easier reading (both the symbols and addresses). In real usage, the `ScSymbol(\"transfer\").toXdr().toString(\"base64\")`, and `ScBinary(pubkeyBytes).toXdr().toString(\"base64\")`, would be base64 encoded strings for exact matches. For example:\n  - `[ScSymbol(\"transfer\"), \"*\", \"*\"]`\n    - Matches any token transfer events\n  - `[ScSymbol(\"transfer\"), \"*\", \"GABC...123\"]`\n    - Matches any token transfer events to recipient: `GABC...123`\n  - `[ScSymbol(\"transfer\"), \"GDEF...456\", \"GABC...123\"]`\n    - Matches only token transfers from `GDEF...456` to `GABC...123`",
                        "items": {
                            "$ref": "#/components/schemas/TopicFilter"
                        }
                    }
                }
            },
            "LatestLedger": {
                "name": "Latest ledger",
                "description": "Stringified-number of the current latest ledger observed by the node when this response was generated.",
                "schema": {
                    "type": "string"
                }
            },
            "PaginationOptions": {
                "type": "object",
                "title": "PaginationOptions",
                "properties": {
                    "cursor": {
                        "type": "string",
                        "description": "A string ID that points to a specific location in a collection of responses and is pulled from the paging_token value of a record. When a cursor is provided Soroban-RPC will not include the element whose id matches the cursor in the response. Only elements which appear after the cursor are included."
                    },
                    "limit": {
                        "type": "integer",
                        "description": "The maximum number of records returned. The limit for getEvents can range from 1 to 10000 - an upper limit that is hardcoded in Soroban-RPC for performance reasons. If this argument isn't designated, it defaults to 100."
                    }
                }
            },
            "SegmentMatcher": {
                "type": "array",
                "description": "The list can be 1-4 `SegmentMatcher`s long.",
                "minItems": 1,
                "maxItems": 4,
                "items": {
                    "type": "string",
                    "description": "For an exact segment match, a string containing base64-encoded ScVal. For a wildcard single-segment match, the string \"*\", matches exactly one segment."
                }
            },
            "TopicFilter": {
                "type": "array",
                "title": "TopicFilter",
                "description": "List of topic filters. If omitted, query for all events. If multiple filters are specified, events will be included if they match any of the filters. Maximum 5 filters are allowed per request.",
                "maxItems": 5,
                "items": {
                    "$ref": "#/components/schemas/SegmentMatcher"
                }
            }
        }
    }
}